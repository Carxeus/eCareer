// <auto-generated />
using System;
using Job.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Job.Infrastructure.Migrations
{
    [DbContext(typeof(JobDbContext))]
    partial class JobDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityByDefaultColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("Job.Domain.Entities.JobAdvert", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatorUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("text");

                    b.Property<DateTime?>("FirstListingDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<char>("Gender")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(1)")
                        .HasDefaultValue('U');

                    b.Property<bool?>("IsCanDisabilities")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsPublished")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("JobPositionId")
                        .IsRequired()
                        .HasMaxLength(24)
                        .HasColumnType("character varying(24)");

                    b.Property<string>("LanguageId")
                        .IsRequired()
                        .HasMaxLength(24)
                        .HasColumnType("character varying(24)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifiedUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ListingDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<byte?>("MaxExperienceYear")
                        .HasColumnType("smallint");

                    b.Property<byte>("MinExperienceYear")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((byte)0);

                    b.Property<short?>("PersonCount")
                        .HasColumnType("smallint");

                    b.Property<string>("SectorId")
                        .IsRequired()
                        .HasMaxLength(24)
                        .HasColumnType("character varying(24)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(80)
                        .IsUnicode(true)
                        .HasColumnType("character varying(80)");

                    b.Property<DateTime>("ValidityDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("JobPositionId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("SectorId");

                    b.HasIndex("Title");

                    b.HasIndex("CompanyId", "IsDeleted");

                    b.HasIndex("CompanyId", "IsPublished", "IsDeleted");

                    b.ToTable("JobAdvert");
                });

            modelBuilder.Entity("Job.Domain.Entities.JobApplication", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ApplicationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Channel")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("CoverLetter")
                        .HasMaxLength(250)
                        .IsUnicode(true)
                        .HasColumnType("character varying(250)");

                    b.Property<Guid>("CvId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<Guid>("JobAdvertId")
                        .HasColumnType("uuid");

                    b.Property<string>("Referance")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("JobAdvertId");

                    b.HasIndex("JobAdvertId", "IsDeleted");

                    b.HasIndex("UserId", "IsDeleted");

                    b.ToTable("JobApplication");
                });

            modelBuilder.Entity("Job.Domain.Entities.JobEducationLevel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("EducationLevelId")
                        .IsRequired()
                        .HasMaxLength(24)
                        .HasColumnType("character varying(24)");

                    b.Property<Guid>("JobAdvertId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("EducationLevelId");

                    b.HasIndex("JobAdvertId");

                    b.ToTable("JobEducationLevel");
                });

            modelBuilder.Entity("Job.Domain.Entities.JobLocation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CityId")
                        .HasMaxLength(24)
                        .HasColumnType("character varying(24)");

                    b.Property<string>("CountryId")
                        .HasMaxLength(24)
                        .HasColumnType("character varying(24)");

                    b.Property<string>("DistrictId")
                        .HasMaxLength(24)
                        .HasColumnType("character varying(24)");

                    b.Property<Guid>("JobAdvertId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("JobAdvertId");

                    b.ToTable("JobLocation");
                });

            modelBuilder.Entity("Job.Domain.Entities.JobTag", b =>
                {
                    b.Property<Guid>("JobAdvertId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TagId")
                        .HasColumnType("uuid");

                    b.HasKey("JobAdvertId", "TagId");

                    b.HasIndex("JobAdvertId");

                    b.HasIndex("TagId");

                    b.ToTable("JobTag");
                });

            modelBuilder.Entity("Job.Domain.Entities.JobViewingHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Channel")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<Guid>("JobAdvertId")
                        .HasColumnType("uuid");

                    b.Property<string>("Referance")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ViewingDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("JobAdvertId");

                    b.ToTable("JobViewingHistory");
                });

            modelBuilder.Entity("Job.Domain.Entities.JobWorkType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("JobAdvertId")
                        .HasColumnType("uuid");

                    b.Property<string>("WorkTypeId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("JobAdvertId");

                    b.ToTable("JobWorkType");
                });

            modelBuilder.Entity("Job.Domain.Entities.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("Tag");
                });

            modelBuilder.Entity("Job.Domain.Entities.JobApplication", b =>
                {
                    b.HasOne("Job.Domain.Entities.JobAdvert", "JobAdvert")
                        .WithMany("Applications")
                        .HasForeignKey("JobAdvertId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JobAdvert");
                });

            modelBuilder.Entity("Job.Domain.Entities.JobEducationLevel", b =>
                {
                    b.HasOne("Job.Domain.Entities.JobAdvert", "JobAdvert")
                        .WithMany("EducationLevels")
                        .HasForeignKey("JobAdvertId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JobAdvert");
                });

            modelBuilder.Entity("Job.Domain.Entities.JobLocation", b =>
                {
                    b.HasOne("Job.Domain.Entities.JobAdvert", "JobAdvert")
                        .WithMany("Locations")
                        .HasForeignKey("JobAdvertId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JobAdvert");
                });

            modelBuilder.Entity("Job.Domain.Entities.JobTag", b =>
                {
                    b.HasOne("Job.Domain.Entities.JobAdvert", "JobAdvert")
                        .WithMany("Tags")
                        .HasForeignKey("JobAdvertId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Job.Domain.Entities.Tag", "Tag")
                        .WithMany("Tags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JobAdvert");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Job.Domain.Entities.JobViewingHistory", b =>
                {
                    b.HasOne("Job.Domain.Entities.JobAdvert", "JobAdvert")
                        .WithMany("ViewingHistories")
                        .HasForeignKey("JobAdvertId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JobAdvert");
                });

            modelBuilder.Entity("Job.Domain.Entities.JobWorkType", b =>
                {
                    b.HasOne("Job.Domain.Entities.JobAdvert", "JobAdvert")
                        .WithMany("WorkTypes")
                        .HasForeignKey("JobAdvertId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JobAdvert");
                });

            modelBuilder.Entity("Job.Domain.Entities.JobAdvert", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("EducationLevels");

                    b.Navigation("Locations");

                    b.Navigation("Tags");

                    b.Navigation("ViewingHistories");

                    b.Navigation("WorkTypes");
                });

            modelBuilder.Entity("Job.Domain.Entities.Tag", b =>
                {
                    b.Navigation("Tags");
                });
#pragma warning restore 612, 618
        }
    }
}
